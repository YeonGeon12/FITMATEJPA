// build.gradle (Final Version with Comments)

// 1. 플러그인 설정
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
}

// 2. 프로젝트 기본 정보
group = 'kopo'
version = '0.0.1-SNAPSHOT'
description = 'FITMATE'

// 3. Java 설정
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// 4. Lombok 설정
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 5. 라이브러리 저장소 설정: 의존성을 다운로드할 원격 저장소를 지정합니다.
repositories {
    mavenCentral()
}

// 6. 라이브러리 버전 관리용 변수: 여러 곳에서 사용될 버전을 변수로 선언하여 관리를 용이하게 합니다.
ext {
    // Spring Boot 3.2.x와 가장 잘 호환되는 공식 Spring Cloud 버전입니다.
    springCloudVersion = "2023.0.1"
}

// 7. 의존성 버전 관리 (BOM) - [수정됨] 주석 해제 필수!
// 여러 라이브러리 간 버전 충돌을 막아주는 매우 중요한 부분입니다.
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// 8. 의존성 라이브러리 목록
dependencies {

    // --- Spring Boot 핵심 & 웹 ---
    implementation 'org.springframework.boot:spring-boot-starter-web'  // 내장 톰캣 서버, RESTful API 제공
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // 애플리케이션의 상태를 모니터링
    implementation 'org.springframework.boot:spring-boot-starter-validation' // 객체의 필드 값을 검증하는 기능 추가
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // 비동기 및 논블로킹 I/O를 지원
    implementation 'org.springframework.boot:spring-boot-starter-mail' // 이메일 발송 기능을 간편하게 구현할 수 있도록 지원

    // --- 데이터 저장 및 처리
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // RDB와 객체를 매핑해주는 JPA 기술 제공
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client' // MariaDB 데이터 베이스에 연결하기 위한 드라이버
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb' // NOSQL MongoDB에 연동을 지원
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'  // 인메모리 데이터 저장소 Redis와 연동 지원

    // --- 보안 & 세션 ---
    implementation 'org.springframework.boot:spring-boot-starter-security' // 표준 보안 프레임워크
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6' // Thymeleaf 템플릿에서 현재 로그인한 사용자 정보나 권한 확인
    implementation 'org.springframework.session:spring-session-data-redis' // 사용자의 로그인 세션 정보 관리

    // ---MSA & 외부 API 통신 ☁️ ---
    implementation 'com.openai:openai-java:4.1.0' // OpenAI의 API를 JAVA환경에서 쉽게 다룰 수 있게 지원
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign' // 다른 마이크로서비스의 REST API 사용지원

    // --- VIEW 템플릿 엔진 ---
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // 서버 데이터를 HTML에 결합해 동적인 웹페이지 지원

    // --- Developer Tools & Database Driver ---
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // --- Testing ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// 9. 테스트 설정
tasks.named('test') {
    useJUnitPlatform()
}